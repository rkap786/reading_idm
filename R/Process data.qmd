---
title: "Process item data"
format: html
editor: visual
---

## Import data

```{r}
library(readr)
library(readxl)
library(tidyverse)
library(dplyr)
setwd('/Users/radhika/Library/CloudStorage/GoogleDrive-rkap786@stanford.edu/My Drive/0. Projects - Stanford/Item generation/Data/')
#setwd("G:/My Drive/0. Projects - Stanford/Item generation/Data")


```

```{r}
# f1= read_csv("Data/Digitized items - Sheet1.csv")
# f2= read_csv("Data/Digitized items_Om - Sheet1.csv")
f= read_csv("Data/Raw/Combined data_edit - Data_combined_edit.csv")

#f1= f1[,-1]
# f2= f2[,-1]

f= f |> 
  mutate(across(starts_with("Per"), ~str_replace(.x,'\\*', ''))) |>
  mutate(across(starts_with("Per"), ~as.numeric(.x)))


f= f |> 
  mutate(across(starts_with("Percent"), ~str_replace(.x,'\\*', ''))) |>
  mutate(across(starts_with("Percent"), ~as.numeric(.x)))



nm= c("pdfname", "PsgNum", "Passage", "Directions", "Title", "Qno", 
      "QuestionText", "CogReasoning", "CogReasoningType", "ItemType", "Option1", "Option2", "Option3", "Option4", "BoxTextPassage", "BoxTextQuestion", "BoxTextOption", "CorrectOption",
      "pVal", "PerOption1", "PerOption2", "PerOption3",
      "PerOption4", "Standard","DOK", "PassageWordCount", "PassageLexile", "PassageFK",
      "PassageAddInfo","QuesAddInfo","OptionAddInfo",
      "FootnoteYN", "Copyright", "OtherInstruct", "OtherInfo"
      )
names(f) = nm
                
glimpse(f)




```

## Data checks & Fix data entry

```{r}


# Generate unique passage numbers and question
f$PassNumUnq = paste0(f$pdfname, ".",f$PsgNum)
f$QNoUnq = paste0(f$pdfname,".", f$PsgNum, ".",f$Qno)
f= data.frame(f)

#f=f |> mutate(PsgNum= ifelse(PsgNum==0,3,PsgNum))

n_distinct(f$PassNumUnq)
n_distinct(f$QNoUnq)

unique(f$CorrectOption)
f= f |>
  mutate(CorrectOptionNum = case_when(CorrectOption== "A" | CorrectOption== "F" ~ 1,
                                      CorrectOption== "B" | CorrectOption== "G" ~ 2,
                                      CorrectOption== "C" | CorrectOption== "c" | 
                                        CorrectOption== "H" ~ 3,
                                      CorrectOption== "D" | CorrectOption== "J" ~ 4
                                      ))


f = f |>
  mutate(correctnum= case_when(CorrectOptionNum=="1" ~ PerOption1/100,
                               CorrectOptionNum=="2" ~ PerOption2/100,
                               CorrectOptionNum=="3" ~ PerOption3/100,
                               CorrectOptionNum=="4" ~ PerOption4/100,
                               ),
         pVal= if_else(is.na(pVal) | pVal>1, correctnum, pVal)
         )


summary(f$pVal)
## Drop first 6 rows - duplicate data entry
f= f[-c(1:6),]



```

### Create grade, year, state variables

```{r}
## Create grade name and year

f$year = str_sub(f$pdfname,1,4)

fsubset= f |> filter(str_detect(pdfname, "gr")) |> 
  dplyr::select(pdfname) |> distinct() |>
  mutate(loc= str_locate(pdfname, pattern="gr")[,1]) |>
  mutate(grade = if_else(str_detect(pdfname, "grade"), 
                         str_sub(pdfname,loc, loc+6),
                         str_sub(pdfname,loc, loc+2))) |>
  dplyr::select(-loc)
  

fsubset2 = f |> filter(str_detect(pdfname, "released-items")) |>
  dplyr::select(pdfname) |> distinct() |>
  mutate(len= str_length(pdfname)) |>
  mutate(grade= str_sub(pdfname, len-1, len)) |> 
  dplyr::select(-len)
  

fsubset=bind_rows(fsubset, fsubset2)
fsubset= fsubset |>
  mutate(grade= case_when(grade %in% c("g3", "gr3", "grade-3") ~ "Grade3",
                          grade %in% c("g4", "gr4", "grade-4") ~ "Grade4",
                          grade %in% c("g5", "gr5", "grade-5") ~ "Grade5",
                          grade %in% c("g6", "gr6", "grade-6") ~ "Grade6",
                          grade %in% c("g7", "gr7", "grade-7") ~ "Grade7",
                          grade %in% c("g8", "gr8", "grade-8") ~ "Grade8"
                          )
         
         )

f= left_join(f, fsubset)

table(f$grade)
table(f$year)

## Add state
f= f |> mutate(state=if_else(str_detect(pdfname, "released-items"), "NY", "Texas"))

## Remove questions that map to 2 passages
table(f$PsgNum)
f=f |> filter(!(PsgNum=="2, 3" | PsgNum=="3, 4" | PsgNum=="3 ,4"))
table(f$PsgNum)


write_csv(f,"Data/Datacombined_clean.csv")

##Check - no NA
# f |> filter(is.na(grade))
# f |> filter(is.na(year))

```

### Passage description

```{r}
f_passage = f |> filter(!is.na(Passage), Passage!="")  |>
  dplyr::select(pdfname, PassNumUnq, Passage, PassageWordCount, PassageLexile, PassageFK, BoxTextPassage, BoxTextQuestion, FootnoteYN,PassageFK)


n_distinct(f_passage$Passage)
n_distinct(f_passage$PassNumUnq)

### Add variables for use of text highlights (bold, italics, footnotes) in passages
f_passage= f_passage |> 
  mutate(pass_text_bold_yn= if_else(str_detect(Passage, "\\*"),1,0),
         pass_text_italics_yn= if_else(str_detect(Passage, "\\_"),1,0),
         pass_text_fn_yn= if_else(str_detect(Passage, "\\^"),1,0),
         pass_text_underline_yn= if_else(str_detect(Passage, "<u>"),1,0),
         pass_highlight_yn= if_else(pass_text_bold_yn==1 | pass_text_italics_yn==1 | pass_text_fn_yn==1 | pass_text_underline_yn==1, 1, 0)
         
         )

table(f_passage$pass_text_bold_yn)
table(f_passage$pass_text_italics_yn)
table(f_passage$pass_text_fn_yn)
table(f_passage$pass_text_underline_yn)
table(f_passage$pass_highlight_yn)


## Drop highlights from passage
f_passage$Passage= gsub('\\*', '', f_passage$Passage)
f_passage$Passage= gsub('\\_', '', f_passage$Passage)
f_passage$Passage= gsub('\\^[[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('<u>', '', f_passage$Passage)

sum(str_detect(f_passage$Passage,'\\^'))
sum(str_detect(f_passage$Passage,'\\*'))
sum(str_detect(f_passage$Passage,'\\_'))
sum(str_detect(f_passage$Passage,'\\^[[:digit:]]+'))

## check footnote number
f_passage$FootnoteYN_binary= if_else(is.na(f_passage$FootnoteYN),0,1)
#which((f_passage$FootnoteYN_binary!=f_passage$pass_text_fn_yn)==TRUE)
#f_passage$Passage[f_passage$FootnoteYN_binary!=f_passage$pass_text_fn_yn]
f_passage = f_passage |> dplyr::select(-FootnoteYN_binary) #we dont need both 

## Identify use of line numbers 

## All passages have line numbers, no useful variation
sum(str_detect(f_passage$Passage,'\n[[:digit:]]+') | 
      str_detect(f_passage$Passage,'\n [[:digit:]]+') |
      str_detect(f_passage$Passage,'\n  [[:digit:]]+') |
      str_detect(f_passage$Passage,'\n[[:digit:]]+\\.') | 
      str_detect(f_passage$Passage,'\n [[:digit:]]+\\.') |
      str_detect(f_passage$Passage,'\n  [[:digit:]]+\\.')
      )

nrow(f_passage)

f_passage$linenums = if_else(str_detect(f_passage$Passage,'\n[[:digit:]]+'), 1, 2)
f_passage$linenums = if_else(str_detect(f_passage$Passage,'\n [[:digit:]]+'), 1, f_passage$linenums)
f_passage$linenums = if_else(str_detect(f_passage$Passage,'\n  [[:digit:]]+'), 1, f_passage$linenums)
table(f_passage$linenums)

f_passage = f_passage |> dplyr::select(-linenums) 




## Drop numbers. from passages
f_passage$Passage= gsub('\n[[:digit:]]+\\.', '', f_passage$Passage)
f_passage$Passage= gsub('\n [[:digit:]]+\\.', '', f_passage$Passage)
f_passage$Passage= gsub('\n  [[:digit:]]+\\.', '', f_passage$Passage)
f_passage$Passage= gsub('\n[[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('\n [[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('\n  [[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('\n[[:digit:]]+\\"', '', f_passage$Passage)
f_passage$Passage= gsub('\\"[[:digit:]]+\\.', '', f_passage$Passage)

f_passage$Passage= gsub('\"1.', '', f_passage$Passage)
f_passage$Passage= gsub('\"1', '', f_passage$Passage)


 
#f_passage$Passage= gsub('[[:digit:]]+', '', f_passage$Passage)

# str1= f_passage$Passage[1]
# f_passage$Passage=gsub('(?<![0-9])/|/(?![0-9])', '', str1, perl=TRUE)
# f_passage$Passage=gsub('\n\n2', "", f_passage$Passage)
# f_passage$Passage=gsub('\n', "", f_passage$Passage)
# f_passage$Passage=stringr::str_replace(f_passage$Passage, '\\*', '')
# f_passage$Passage=stringr::str_replace(f_passage$Passage, '\\^[[:digit:]]', '')


## Number of paragraphs
f_passage$numPara= str_count(f_passage$Passage, "\n")


## Identify markers for bold, italitcs, footnotes, etc


## Drop markers for bold, italitcs, footnotes, etc


## Remove paragraph identifiers
#f_passage$Passage= gsub('\n', '', f_passage$Passage)
f_passage$Passage= gsub('*', '', f_passage$Passage)
f_passage$Passage= gsub('_', '', f_passage$Passage)
f_passage$Passage= gsub('^[[:digit:]]+\\.', '', f_passage$Passage)
f_passage$Passage= gsub('^[[:digit:]]+', '', f_passage$Passage)


## Word count
library(tidytext)
f_passage$PassageWordCount.gen= lengths(strsplit(f_passage$Passage, "\\W+"))



## Export all passages as text files into a folder
for (i in 1:nrow(f_passage)) {
  write(f_passage$Passage[i], 
        file=paste0("Data/Processed/Passages/", f_passage$PassNumUnq[i], ".txt")) 
}

write_csv(f_passage,"Data/Processed/Datacombined_clean_passages.csv")
```

### Readability from Python

Note to self: check why 3 points have different word length

```{r}
#f_passage= read_csv(f_passage,"Data/Datacombined_clean_passages.csv")
#f_passage=f_passage[,-1]
# File above with FLesch Kincaid readability scores
f_passage= read_csv("Data/Processed/Datacombined_clean_passages_fk_py.csv")
f_passage=f_passage[,-1]
#names(f_passage)
plot(f_passage$PassageFK, f_passage$fk)
cor(f_passage[,c("PassageFK","fk")],use = "complete.obs") 
plot(f_passage$PassageWordCount, f_passage$passage_len)
plot(f_passage$PassageWordCount.gen, f_passage$passage_len)
cor(f_passage$PassageWordCount.gen, f_passage$passage_len)
#passage_len is from python
# PassageWordCount is given from data
# PassageWordCount.gen is from R and is closest to the data, this is what we use
 
f_passage$FootnoteYNbinary= if_else(is.na(f_passage$FootnoteYN),0,1)
f_passage= f_passage |> dplyr::select(-PassageWordCount, -PassageFK, 
                                      -passage_len, -PassageLexile)
glimpse(f_passage)

write_csv(f_passage,"Data/Processed/Datacombined_clean_passages2.csv")



```

### Coh-Metrix

```{r}
f_passage_cm= read_excel("Data/Resultsfinal.xlsx", sheet = "Results3")
f_passage_cm= f_passage_cm |> rename(PassNumUnq= TextID) |>
  mutate(PassNumUnq= str_remove_all(PassNumUnq,".txt"))

f_passage =inner_join(f_passage, f_passage_cm) 
write_csv(f_passage,"Data/Processed/Datacombined_clean_passages2.csv")



```

### Questions, Options and answers

```{r}

f_options = f |> dplyr::select(pdfname, PassNumUnq, QNoUnq, QuestionText, 
                               CorrectOption, contains("Option"), ItemType, pVal)

f_options = f_options |> filter(ItemType=="multiple_choice")
## Drop rows that do not have pvalues 
f_options |> filter(is.na(pVal)) |> pull(pdfname) |> unique()
f_options = f_options |> filter(!is.na(pVal)) # NY 2021 is dropped


table(str_sub(f_options$QuestionText,1,2))
f_options$QuestionNo = str_sub(f_options$QuestionText,1,2)
f_options$QuestionText = str_sub(f_options$QuestionText,3,-1)

table(str_sub(f_options$Option1,1,2))
table(str_sub(f_options$Option2,1,2))
table(str_sub(f_options$Option3,1,2))
table(str_sub(f_options$Option4,1,2))

### Did question text contain bolded text
f_options$ques_text_bold_yn= if_else(str_detect(f_options$QuestionText, "\\*"),1,0)
table(f_options$ques_text_bold_yn)

### Did question contain underlined text
f_options$ques_text_underline_yn= if_else(str_detect(f_options$QuestionText, "<u>"),1,0)
table(f_options$ques_text_underline_yn)

f_options$ques_text_highlight_yn= if_else(f_options$ques_text_bold_yn==1 | f_options$ques_text_underline_yn==1, 1, 0)

f_options= f_options |> dplyr::select(-ques_text_underline_yn, -ques_text_bold_yn)

#f_options$ques_text_bold_len= lapply(extracted_str, function(x) x[2]-x[1]+1)
#extracted_str <- str_sub(extracted_str, 2, -2)


### Reference to paragraph numbers
#f_options$QuestionText[str_detect(f_options$QuestionText, "paragraph")]
f_options$QuestionText[str_detect(f_options$QuestionText, "read these")]

f_options$ques_text_para_yn= if_else(str_detect(f_options$QuestionText, "paragraph"),1,0)

f_options$ques_text_sentence_yn= if_else(
  str_detect(f_options$QuestionText, "Read this") |
    str_detect(f_options$QuestionText, "Read these") |
    str_detect(f_options$QuestionText, "Read the") ,1,0)


f_options$ques_text_ref_yn= if_else(f_options$ques_text_para_yn==1 | f_options$ques_text_sentence_yn==1, 1, 0)

f_options= f_options |> dplyr::select(-ques_text_para_yn, -ques_text_sentence_yn)

## Remove special characters from questions
#sum(str_detect(f_options$QuestionText,'\\*')) ##Bold
#sum(str_detect(f_options$QuestionText,'\\_'))
#sum(str_detect(f_options$QuestionText,'<u>'))

f_options$QuestionText= gsub('\\*', '', f_options$QuestionText)
f_options$QuestionText= gsub('\\_', '', f_options$QuestionText)
f_options$QuestionText= gsub('<u>', '', f_options$QuestionText)



## Edit Option remove first letters
f_options$firstwo= str_sub(f_options$Option1,1,2)
f_options$Option1 = if_else(f_options$firstwo %in% c("A", "F"), 
                            str_sub(f_options$Option1,2,-1), str_sub(f_options$Option1,3,-1)) 
f_options$Option1 = if_else(str_sub(f_options$Option1,1,2) ==".",
                            str_sub(f_options$Option1,2,-1), f_options$Option1) 

f_options$firstwo= str_sub(f_options$Option2,1,2)
f_options$Option2 = if_else(f_options$firstwo %in% c("B", "G"), 
                            str_sub(f_options$Option2,2,-1), str_sub(f_options$Option2,3,-1)) 
f_options$firstwo= str_sub(f_options$Option3,1,2)
f_options$Option3 = if_else(f_options$firstwo %in% c("C", "H"), 
                            str_sub(f_options$Option3,2,-1), str_sub(f_options$Option3,3,-1)) 

f_options$firstwo= str_sub(f_options$Option4,1,2)
f_options$Option4 = if_else(f_options$firstwo %in% c("D", "J"), 
                            str_sub(f_options$Option4,2,-1), str_sub(f_options$Option4,3,-1)) 

table(str_sub(f_options$Option1,1,2))
table(str_sub(f_options$Option2,1,2))
table(str_sub(f_options$Option3,1,2))
table(str_sub(f_options$Option4,1,2))
f_options = f_options |> dplyr::select(-firstwo)

### Change from option1-4 to distractors
f_options$option_correct_ans=rep("", nrow(f_options))
f_options$option_distractor1= rep("", nrow(f_options))
f_options$option_distractor2= rep("", nrow(f_options))
f_options$option_distractor3= rep("", nrow(f_options))


for (r in 1:nrow(f_options)) {
  c=1
for (i in 1:4) {
  varname= paste0("Option",i)
  if(i==f_options$CorrectOptionNum[r]) {
    f_options$option_correct_ans[r] = f_options[[varname]][r]
  }
  if(i!=f_options$CorrectOptionNum[r]) {
    varnamey= paste0("option_distractor",c)
    f_options[[varnamey]][r] = f_options[[varname]][r]
    c=c+1
  }
  
  }
}

f_options= f_options |> dplyr::select(-Option1, -Option2, -Option3, -Option4)
f_options= f_options |> dplyr::select(-CorrectOption)
f_options= f_options|> group_by(pdfname, PassNumUnq) |>
  mutate(n= n(), ques_order = 1:n) |> dplyr::select(-n) |> ungroup()

names(f_options)

## Remove special characters from options
f_options$option_distractor1= gsub('\\*', '', f_options$option_distractor1)
f_options$option_distractor2= gsub('\\*', '', f_options$option_distractor2)
f_options$option_distractor3= gsub('\\*', '', f_options$option_distractor3)
f_options$option_correct_ans= gsub('\\*', '', f_options$option_correct_ans)

f_options$option_distractor1= gsub('\\_', '', f_options$option_distractor1)
f_options$option_distractor2= gsub('\\_', '', f_options$option_distractor2)
f_options$option_distractor3= gsub('\\_', '', f_options$option_distractor3)
f_options$option_correct_ans= gsub('\\_', '', f_options$option_correct_ans)


f_options$option_distractor1= gsub('<u>', '', f_options$option_distractor1)
f_options$option_distractor2= gsub('<u>', '', f_options$option_distractor2)
f_options$option_distractor3= gsub('<u>', '', f_options$option_distractor3)
f_options$option_correct_ans= gsub('<u>', '', f_options$option_correct_ans)




```

### Merge files

```{r}

f_clean= inner_join(f_passage, f_options)
#f_pv = f |> select(pdfname, PassNumUnq, QNoUnq, pVal)
# anti_join(f_passage, f_options) |> View()
#f_clean= inner_join(f_clean, f_pv)
f_clean= f_clean |> filter(!is.na(pVal))
#f_clean= f_clean |> filter(!is.na(fk))

names(f)
f_desc= f |> dplyr::select(pdfname, PassNumUnq, QNoUnq, year, grade, state)
f_clean= inner_join(f_clean, f_desc)
names(f_clean)
f_clean = f_clean |> dplyr::select(-BoxTextPassage, -BoxTextPassage, -BoxTextOption, -BoxTextQuestion, -FootnoteYN, -OptionAddInfo, -FootnoteYNbinary, 
                                   -ItemType
                                   )

## Drop the text features we dont want to use
#f_clean= f_clean |> select(-RDFRE, - RDFKGL, -DESWC)

n_distinct(f_clean$PassNumUnq)
n_distinct(f_clean$QNoUnq)
f_clean_for_embed= f_clean |> dplyr::select(pdfname, PassNumUnq, Passage, QNoUnq,
                                     QuestionText, starts_with("option"), pVal)

f_clean_for_embed$question_correct_ans= paste0(f_clean_for_embed$QuestionText,
                                               f_clean_for_embed$option_correct_ans)
f_clean_for_embed$question_dis1= paste0(f_clean_for_embed$QuestionText,
                                               f_clean_for_embed$option_distractor1)
f_clean_for_embed$question_dis2= paste0(f_clean_for_embed$QuestionText,
                                               f_clean_for_embed$option_distractor2)
f_clean_for_embed$question_dis3= paste0(f_clean_for_embed$QuestionText,
                                               f_clean_for_embed$option_distractor3)

f_clean_for_embed$psg_question_correct_ans= paste0(f_clean_for_embed$option_correct_ans,
                                                   f_clean_for_embed$QuestionText,
                                                   f_clean_for_embed$Passage
                                               )
f_clean_for_embed$psg_question_dis1= paste0(
                                            f_clean_for_embed$QuestionText,
                                            f_clean_for_embed$option_distractor1,
                                            f_clean_for_embed$Passage)
f_clean_for_embed$psg_question_dis2= paste0(
                                            f_clean_for_embed$QuestionText,
                                            f_clean_for_embed$option_distractor2,
                                            f_clean_for_embed$Passage)
f_clean_for_embed$psg_question_dis3= paste0(f_clean_for_embed$QuestionText,
                                               f_clean_for_embed$option_distractor3,
                                            f_clean_for_embed$Passage)

f_clean = f_clean |> relocate(pVal, .after=last_col())
f_clean_for_embed = f_clean_for_embed |> relocate(pVal, .after=last_col())


write_csv(f_clean_for_embed, "Data/Processed/data_passage_ques_options_pv.csv")
write_csv(f_clean, "Data/Processed/data_qual_info.csv")

#write_csv(f_clean_for_embed,"/Users/radhika/Library/CloudStorage/GoogleDrive-rkap786@stanford.edu/My Drive/0. Projects - Stanford/Item generation/Data/data_passage_ques_options_pv.csv")

#write_csv(f_clean,"/Users/radhika/Library/CloudStorage/GoogleDrive-rkap786@stanford.edu/My Drive/0. Projects - Stanford/Item generation/Data/data_qual_info.csv")

```

## Descriptive stats

```{r}

## Check no duplicate for :2023-released-items-ela-g3


n_distinct(f_clean$PassNumUnq)
n_distinct(f_clean$QNoUnq)
table1= data.frame(table(f$grade, f$year))
library(gtsummary)

f_clean |> group_by(year) |> summarize(n=n())

f_clean |> group_by(grade, state, year) |> summarize(n=n()) |> 
  pivot_wider(names_from = year,
              values_from=n)

f_clean |> group_by(grade, state, year) |> summarize(mean.pv= mean(pVal)) |> 
  pivot_wider(names_from = year,
              values_from=mean.pv) |>
  filter(state=="NY")

f_clean |> group_by(grade, state, year) |> summarize(mean.pv= mean(pVal)) |> 
  pivot_wider(names_from = year,
              values_from=mean.pv) |>
  filter(state=="Texas")


tab2_3 <- f |> dplyr::select(grade,year) %>%
                      tbl_cross(row = grade,
                                col = year,
                                percent = "cell",
                                missing = "no",
                                label = year ~ "Year")
tab2_3


pvsummary= f |> group_by(pdfname) |> 
  summarise(meanpv= mean(pVal), sd.pv=sd(pVal), min.pv=min(pVal), max.pv=max(pVal)) 

summary(pvsummary$meanpv)
summary(pvsummary$sd.pv)

###
 

```

### 
