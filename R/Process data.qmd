---
title: "Process item data"
format: html
editor: visual
---

## Import data

```{r}
library(readr)
library(tidyverse)
library(dplyr)
setwd("/Users/radhika/Library/CloudStorage/GoogleDrive-rkap786@stanford.edu/My Drive/0. Projects - Stanford/Item generation/Code/reading_idm")
```

```{r}
# f1= read_csv("Data/Digitized items - Sheet1.csv")
# f2= read_csv("Data/Digitized items_Om - Sheet1.csv")
f= read.csv("Data/Combined data_edit - Data_combined_edit.csv")

#f1= f1[,-1]
# f2= f2[,-1]

f= f |> 
  mutate(across(starts_with("Per"), ~str_replace(.x,'\\*', ''))) |>
  mutate(across(starts_with("Per"), ~as.numeric(.x)))


f= f |> 
  mutate(across(starts_with("Percent"), ~str_replace(.x,'\\*', ''))) |>
  mutate(across(starts_with("Percent"), ~as.numeric(.x)))



nm= c("pdfname", "PsgNum", "Passage", "Directions", "Title", "Qno", 
      "QuestionText", "CogReasoning", "CogReasoningType", "ItemType", "Option1", "Option2", "Option3", "Option4", "BoxTextPassage", "BoxTextQuestion", "BoxTextOption", "CorrectOption",
      "pVal", "PerOption1", "PerOption2", "PerOption3",
      "PerOption4", "Standard","DOK", "PassageWordCount", "PassageLexile", "PassageFK",
      "PassageAddInfo","QuesAddInfo","OptionAddInfo",
      "FootnoteYN", "Copyright", "OtherInstruct", "OtherInfo"
      )
names(f) = nm
                
glimpse(f)


f = f |> filter(ItemType=="multiple_choice")

```

## Data checks & Fix data entry

```{r}


# Generate unique passage numbers and question
f$PassNumUnq = paste0(f$pdfname, ".",f$PsgNum)
f$QNoUnq = paste0(f$pdfname,".", f$PsgNum, ".",f$Qno)
f= data.frame(f)

#f=f |> mutate(PsgNum= ifelse(PsgNum==0,3,PsgNum))

n_distinct(f$PassNumUnq)
n_distinct(f$QNoUnq)

unique(f$CorrectOption)
f= f |>
  mutate(CorrectOptionNum = case_when(CorrectOption== "A" | CorrectOption== "F" ~ 1,
                                      CorrectOption== "B" | CorrectOption== "G" ~ 2,
                                      CorrectOption== "C" | CorrectOption== "c" | 
                                        CorrectOption== "H" ~ 3,
                                      CorrectOption== "D" | CorrectOption== "J" ~ 4
                                      ))


f = f |>
  mutate(correctnum= case_when(CorrectOptionNum=="1" ~ PerOption1/100,
                               CorrectOptionNum=="2" ~ PerOption2/100,
                               CorrectOptionNum=="3" ~ PerOption3/100,
                               CorrectOptionNum=="4" ~ PerOption4/100,
                               ),
         pVal= if_else(is.na(pVal) | pVal>1, correctnum, pVal)
         )


summary(f$pVal)
## Drop rows that do not have pvalues 
f |> filter(is.na(pVal)) |> pull(pdfname) |> unique()
f = f |> filter(!is.na(pVal)) # NY 2021 is dropped
## Drop first 6 rows - duplicate data entry
f= f[-c(1:6),]



```

```{r}
## Create grade name and year

f$year = str_sub(f$pdfname,1,4)

fsubset= f |> filter(str_detect(pdfname, "gr")) |> 
  dplyr::select(pdfname) |> distinct() |>
  mutate(loc= str_locate(pdfname, pattern="gr")[,1]) |>
  mutate(grade = if_else(str_detect(pdfname, "grade"), 
                         str_sub(pdfname,loc, loc+6),
                         str_sub(pdfname,loc, loc+2))) |>
  dplyr::select(-loc)
  

fsubset2 = f |> filter(str_detect(pdfname, "released-items")) |>
  dplyr::select(pdfname) |> distinct() |>
  mutate(len= str_length(pdfname)) |>
  mutate(grade= str_sub(pdfname, len-1, len)) |> 
  dplyr::select(-len)
  

fsubset=bind_rows(fsubset, fsubset2)
fsubset= fsubset |>
  mutate(grade= case_when(grade %in% c("g3", "gr3", "grade-3") ~ "Grade3",
                          grade %in% c("g4", "gr4", "grade-4") ~ "Grade4",
                          grade %in% c("g5", "gr5", "grade-5") ~ "Grade5",
                          grade %in% c("g6", "gr6", "grade-6") ~ "Grade6",
                          grade %in% c("g7", "gr7", "grade-7") ~ "Grade7",
                          grade %in% c("g8", "gr8", "grade-8") ~ "Grade8"
                          )
         
         )

f= left_join(f, fsubset)

table(f$grade)
table(f$year)

##Check - no NA
# f |> filter(is.na(grade))
# f |> filter(is.na(year))

```

## Descriptive stats

```{r}

## Check no duplicate for :2023-released-items-ela-g3
n_distinct(f$PassNumUnq)
n_distinct(f$QNoUnq)
table1= data.frame(table(f$grade, f$year))
library(gtsummary)

tab2_3 <- f |> select(grade,year) %>%
                      tbl_cross(row = grade,
                                col = year,
                                percent = "cell",
                                missing = "no",
                                label = year ~ "Year")
tab2_3


pvsummary= f |> group_by(pdfname) |> 
  summarise(meanpv= mean(pVal), sd.pv=sd(pVal), min.pv=min(pVal), max.pv=max(pVal)) 

summary(pvsummary$meanpv)
summary(pvsummary$sd.pv)

```

### Passage description

```{r}
f_passage = f |> filter(!is.na(Passage), Passage!="")  |>
  select(pdfname, PassNumUnq, Passage, PassageWordCount, PassageLexile, PassageFK, BoxTextPassage, FootnoteYN)


n_distinct(f_passage$Passage)
n_distinct(f_passage$PassNumUnq)

## Identify use of line numbers 
## All passages have line numbers, no useful variation
sum(str_detect(f_passage$Passage,'\n[[:digit:]]+'))
nrow(f_passage)
f_passage$linenums = if_else(str_detect(f_passage$Passage,'\n[[:digit:]]+'), "Yes", "No")
f_passage$linenums = if_else(str_detect(f_passage$Passage,'\n [[:digit:]]+'), "Yes", f_passage$linenums)
f_passage$linenums = if_else(str_detect(f_passage$Passage,'\n  [[:digit:]]+'), "Yes", f_passage$linenums)
f_passage = f_passage |> select(-linenums) 

# 
# f_passage |> filter(linenums=="No") |>
#   pull(Passage) |> head()

## Drop numbers. from passages
f_passage$Passage= gsub('\n[[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('\n [[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('\n  [[:digit:]]+', '', f_passage$Passage)
f_passage$Passage= gsub('\"1.', '', f_passage$Passage)



#f_passage$Passage= gsub('[[:digit:]]+', '', f_passage$Passage)

# str1= f_passage$Passage[1]
# f_passage$Passage=gsub('(?<![0-9])/|/(?![0-9])', '', str1, perl=TRUE)
# f_passage$Passage=gsub('\n\n2', "", f_passage$Passage)
# f_passage$Passage=gsub('\n', "", f_passage$Passage)
# f_passage$Passage=stringr::str_replace(f_passage$Passage, '\\*', '')
# f_passage$Passage=stringr::str_replace(f_passage$Passage, '\\^[[:digit:]]', '')

## Word count
library(tidytext)
f_passage$PassageWordCount.gen= lengths(strsplit(f_passage$Passage, "\\W+"))

## Number of paragraphs
f_passage$numPara= str_count(f_passage$Passage, "\n")


## Identify markers for bold, italitcs, footnotes, etc


## Drop markers for bold, italitcs, footnotes, etc




```

### Options and answers

```{r}

f_options = f |> dplyr::select(pdfname, PassNumUnq, QNoUnq, QuestionText, contains("Option"))
table(str_sub(f$QuestionText,1,2))
f_options$QuestionText = str_sub(f_options$QuestionText,3,-1)


table(str_sub(f$Option1,1,2))
table(str_sub(f$Option2,1,2))
table(str_sub(f$Option3,1,2))
table(str_sub(f$Option4,1,2))

f_options$firstwo= str_sub(f$Option1,1,2)
f_options$Option1 = if_else(f_options$firstwo %in% c("A", "F"), 
                            str_sub(f_options$Option1,2,-1), str_sub(f_options$Option1,3,-1)) 
f_options$Option1 = if_else(str_sub(f_options$Option1,1,2) ==".",
                            str_sub(f_options$Option1,2,-1), f_options$Option1) 

f_options$firstwo= str_sub(f$Option2,1,2)
f_options$Option2 = if_else(f_options$firstwo %in% c("B", "G"), 
                            str_sub(f_options$Option2,2,-1), str_sub(f_options$Option2,3,-1)) 
f_options$firstwo= str_sub(f$Option3,1,2)
f_options$Option3 = if_else(f_options$firstwo %in% c("C", "H"), 
                            str_sub(f_options$Option3,2,-1), str_sub(f_options$Option3,3,-1)) 

f_options$firstwo= str_sub(f$Option4,1,2)
f_options$Option4 = if_else(f_options$firstwo %in% c("D", "J"), 
                            str_sub(f_options$Option4,2,-1), str_sub(f_options$Option4,3,-1)) 

table(str_sub(f_options$Option1,1,2))
table(str_sub(f_options$Option2,1,2))
table(str_sub(f_options$Option3,1,2))
table(str_sub(f_options$Option4,1,2))
f_options = f_options |> select(-firstwo)


```

### Merge files

```{r}

f_clean= full_join(f_passage, f_options)
f_pv = f |> select(pdfname, PassNumUnq, QNoUnq, pVal)
f_clean= full_join(f_clean, f_pv)
f_clean= f_clean |> filter(!is.na(pVal))

n_distinct(f_clean$PassNumUnq)
n_distinct(f_clean$QNoUnq)
f_clean_for_embed= f_clean |> select(pdfname, PassNumUnq, Passage, QNoUnq, 
                                     QuestionText, starts_with("Option"), pVal) |>
  select(-OptionAddInfo)

write_csv(f_clean, "Data/data_passage_ques_options_pv.csv")


```
